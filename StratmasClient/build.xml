<project name="StratmasClient" default="dist" basedir=".">
  <description>
    Program to manage and allocate StratmasServers.
  </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="externaljars" location="externaljars"/>
  <property name="samples" location="samples"/>
  <property name="buildutils" location="buildutils"/>
  <property name="schemas" location="../schemas"/>

  <!-- Following lines not implemented yet, just here for reference-->
  <!-- Uncomment to use JProfile -->
  <!-- <property name="JPROFILE"
        value="-Xrunhprof:file=dump.hprof,format=b"/> -->
  <!-- Uncomment to use JDBDebug -->
  <property name="JDBDEBUG"
    value="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"/>

  <!-- Create the build directory structure used by compile -->
  <mkdir dir="${build}"/>

  <!-- Strip postfixes from os.name on windows (for use with jogl lib
       loading) first find unwanted postfix and then remove it.
  -->
  <filelist id="libDirOSNameList"
    dir="${build}/lib">
    <file name="${os.name}"/>
  </filelist>
  <pathconvert property="unwantedTail"
    refid="libDirOSNameList"
    pathsep="">
    <regexpmapper from="Windows(.*)$$" to="\1"/>
  </pathconvert>
  <pathconvert property="libDir"
    refid="libDirOSNameList"
    pathsep="">
    <regexpmapper from="(.*)${unwantedTail}$$" to="\1-${os.arch}"/>
  </pathconvert>

  <presetdef name="jogljava">
    <java classpath="${build}"
      dir="${build}"
      fork="true">
      <jvmarg value="-Xmx300m"/>
      <sysproperty
        key="java.library.path"
        path="${libDir}"/>
    </java>
  </presetdef>

  <!-- Default java settings for sample runs-->
  <presetdef name="joglClient">
    <jogljava classname="StratmasClient.Client">
      <!-- Comment to disable Client debug options, if value is
           unempty it will be interpreted as a regexp and only classes
           in matching packages will produce output (note that this
           may be relatively expensive). See Debug.java for more
           information. -->
      <sysproperty key="StratmasClientDebug" value=""/>
      <!-- Uncomment to use non standard portnumber -->
      <!-- <sysproperty key="PORT" value="28444"/> -->
      <!-- Uncomment to use dispatcher-->
      <!-- <sysproperty key="DISPATCHER" value="localhost"/> -->
      <!-- Uncomment to use JConsole -->
      <!-- <sysproperty key="com.sun.management.jmxremote"/> -->
      <arg value="-noJoglResolve"/>
    </jogljava>
  </presetdef>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

  <target name="checkGenerateParser">
    <uptodate srcfile="${src}/StratmasClient/TaclanV2/Parser.cup"
      targetfile="${src}/StratmasClient/TaclanV2/Parser.java"
      property="generateParser.uptodate"/>
    <uptodate srcfile="${src}/StratmasClient/TaclanV2/Parser.cup"
      targetfile="${src}/StratmasClient/TaclanV2/Sym.java"
      property="generateParser.uptodate"/>
  </target>

  <target name="checkGenerateLexer">
    <uptodate srcfile="${src}/StratmasClient/TaclanV2/Lexer.lex"
      targetfile="${src}/StratmasClient/TaclanV2/Lexer.java"
      property="generateLexer.uptodate"/>
  </target>

  <target name="generateJava" depends="generateParser,generateLexer"/>

  <target name="generateParser"
    depends="checkGenerateParser"
    unless="generateParser.uptodate">
    <!-- Generate parser files -->
    <java jar="${externaljars}/JCup.jar"
      dir="${src}/StratmasClient/TaclanV2/"
      fork="true">
      <arg line="-package StratmasClient.TaclanV2 -parser Parser -symbols"/>
      <arg line="Sym -expect 0 Parser.cup"/>
    </java>
    <!-- Unfortunatelly the JCup version currently used does not allow
         setting the package name of the runtime, we fix this by replace.
    -->
    <replace file="${src}/StratmasClient/TaclanV2/Parser.java">
      <!-- The first replace ensures that correct references to
           java_cup.runtime will not be replaced by the second
           replace which is doing the actual work -->
      <replacefilter
        token="StratmasClient.TaclanV2.java_cup.runtime"
        value="java_cup.runtime"/>
      <replacefilter
        token="java_cup.runtime"
        value="StratmasClient.TaclanV2.java_cup.runtime"/>
      <replacefilter
        token="throws java.lang.Exception"
        value="throws SemanticException, SyntaxException"/>
      <replacefilter
        token="throw new Exception"
        value="throw new AssertionError"/>
    </replace>
  </target>

  <target name="generateLexer"
    depends="checkGenerateLexer"
    unless="generateLexer.uptodate">
    <!-- Generate lexer files. -->
    <java jar="${externaljars}/JFlex.jar"
      dir="${src}/StratmasClient/TaclanV2/"
      fork="true">
      <arg value="Lexer.lex"/>
    </java>
    <!-- Unfortunatelly the JCup version currently used does not allow
         setting the package name of the runtime, we fix this by
         replace. -->
    <replace file="${src}/StratmasClient/TaclanV2/Lexer.java">
      <!-- The first replace ensures that correct references to
           java_cup.runtime will not be replaced by the second replace
           which is doing the actual work -->
      <replacefilter
        token="StratmasClient.TaclanV2.java_cup.runtime"
        value="java_cup.runtime"/>
      <replacefilter
        token="java_cup.runtime"
        value="StratmasClient.TaclanV2.java_cup.runtime"/>
    </replace>
  </target>

  <target name="extractJarHelper" unless="extractNotRequired">
    <!--
           params: jarsrc jardest Unless the global variable
           extractNotRequired is set (yay ant), extracts the given jar
           to the given destination.
      -->
      <unjar dest="${jardest}" src="${jarsrc}">
        <patternset>
          <exclude name="META-INF/**"/>
        </patternset>
      </unjar>
      <touch file="${jarsrc}">
        <chainedmapper>
          <flattenmapper/>
          <globmapper from="*" to="${build}/antMarkerFile-*.mark"/>
        </chainedmapper>
      </touch>
    </target>

    <target name="extractLibs" depends="init">
      <!-- Copy non-java files, e.g schemas and icons, into build dir -->
      <copy todir="${build}">
        <fileset dir="${src}">
          <include name="**/*.gif"/>
          <include name="**/*.JPG"/>
          <include name="**/*.png"/>
          <include name="**/*.txt"/>
        </fileset>
      </copy>
      <copy todir="${build}/schemas" flatten="true">
        <fileset dir="${schemas}">
          <include name="dispatcherProtocol/*.xsd"/>
          <include name="stratmasProtocol/*.xsd"/>
        </fileset>
      </copy>

      <!-- Put dependencies and files in build dir -->
      <macrodef name="extractJar">
        <!--
           Extracts the given jar to the given destination.  In order
           to decide if the extraction the macro checks for the
           existance of a marker file in ${build}. The jar file is
           extracted iff the marker file does not exist or is older
           than the jar file. The marker file is written on
           completion, which may become a concurrency problem.
      -->
      <attribute name="jarsrc"/>
      <attribute name="jardest"/>
      <sequential>
        <uptodate property="extractNotRequired"
          srcfile="@{jarsrc}">
          <chainedmapper>
            <flattenmapper/>
            <globmapper from="*" to="${build}/antMarkerFile-*.mark"/>
          </chainedmapper>
        </uptodate>
        <antcall target="extractJarHelper">
          <param name="jarsrc" value="@{jarsrc}"/>
          <param name="jardest" value="@{jardest}"/>
        </antcall>
      </sequential>
    </macrodef>
    <extractJar jarsrc="${externaljars}/resolver.jar" jardest="${build}"/>
    <extractJar jarsrc="${externaljars}/xercesImpl.jar" jardest="${build}"/>
    <extractJar jarsrc="${externaljars}/xml-apis.jar" jardest="${build}"/>
    <extractJar jarsrc="${externaljars}/javadbf.jar" jardest="${build}"/>
    <extractJar jarsrc="${externaljars}/App6A.jar" jardest="${build}"/>
    <extractJar jarsrc="${externaljars}/jogl-all.jar" jardest="${build}"/>
    <extractJar jarsrc="${externaljars}/gluegen-rt.jar" jardest="${build}"/>

    <macrodef name="extractLib">
      <attribute name="arch"/>
      <sequential>
        <mkdir dir="${build}/lib/@{arch}"/>
        <extractJar jarsrc="${externaljars}/jogl-all-natives-@{arch}.jar"
          jardest="${build}/lib/@{arch}"/>
      </sequential>
    </macrodef>
    <extractLib arch="linux-amd64"/>
    <extractLib arch="linux-armv6"/>
    <extractLib arch="linux-armv6hf"/>
    <extractLib arch="linux-i586"/>
    <extractLib arch="macosx-universal"/>
    <!--
    <copy todir="${build}/lib/Mac OS X-i386">
      <fileset dir="${build}/lib/Mac OS X-ppc">
        <include name="**/*"/>
      </fileset>
    </copy>
    -->
    <extractLib arch="windows-amd64"/>
    <extractLib arch="windows-i586"/>
    <extractLib arch="solaris-amd64"/>
    <extractLib arch="solaris-i586"/>
    <!-- <extractLib arch="solaris-sparc"/> -->

    <macrodef name="extractLib2">
      <attribute name="arch"/>
      <sequential>
        <mkdir dir="${build}/lib/@{arch}"/>
        <extractJar jarsrc="${externaljars}/gluegen-rt-natives-@{arch}.jar"
          jardest="${build}/lib/@{arch}"/>
      </sequential>
    </macrodef>
    <extractLib2 arch="linux-amd64"/>
    <extractLib2 arch="linux-armv6"/>
    <extractLib2 arch="linux-armv6hf"/>
    <extractLib2 arch="linux-i586"/>
    <extractLib2 arch="macosx-universal"/>
    <extractLib2 arch="solaris-amd64"/>
    <extractLib2 arch="solaris-i586"/>
    <extractLib2 arch="windows-amd64"/>
    <extractLib2 arch="windows-i586"/>
  </target>

  <target name="compile" depends="extractLibs,generateJava"
    description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}"
      encoding="UTF-8"
      destdir="${build}"
      source="6"
      deprecation="yes"
      debug="on"
      fork="yes"
      memoryMaximumSize="300m"
      classpath="${build}"
      includeantruntime="false">
      <!--
      <compilerarg value="-Xlint:all"/>
      -->
      <include name="**"/>

    </javac>
  </target>

  <!-- dist smashes everyting in build into one giant jar. -->
  <target name="dist" depends="compile"
    description="generate the distribution" >
    <mkdir dir="${dist}"/>

    <!-- Put almost everything in ${build} into the
         MyProject.jar file -->
    <jar jarfile="${dist}/${ant.project.name}.jar"
      basedir="${build}"
      excludes="antMarkerFile-*.mark,antSamples.xml,/license/*"
      index="true">
      <manifest>
        <attribute name="Main-Class"
          value="StratmasClient/Client"/>
      </manifest>
    </jar>
  </target>

  <!-- Install target -->
  <target name="install" depends="dist">
    <fail unless="installPrefix">
      No install prefix specified.
    </fail>

    <mkdir dir="${installPrefix}/StratmasClient"/>
    <unjar dest="${installPrefix}/StratmasClient"
      src="${dist}/${ant.project.name}-${DSTAMP}.jar">
    </unjar>
    <mkdir dir="${installPrefix}/samples"/>
    <copy todir="${installPrefix}/samples">
      <fileset dir="${samples}">
        <include name="**/*.scn"/>
        <include name="**/*.shp"/>
        <include name="**/*.dbf"/>
        <include name="**/*.oli"/>
        <include name="**/*.uli"/>
        <include name="**/*.xml"/>
        <include name="**/*.prv"/>
      </fileset>
    </copy>
    <copy todir="${installPrefix}"
      file="${buildutils}/StartClient.bat"/>
    <chmod perm="755"
      file="${installPrefix}/StartClient.bat"/>
    <copy todir="${installPrefix}"
      file="${buildutils}/StartClient.command"/>
    <chmod perm="755"
      file="${installPrefix}/StartClient.command"/>
  </target>

  <!-- Various Client test targets -->
  <target name="Client" depends="compile">
    <!-- Just run client -->
    <joglClient>
    </joglClient>
  </target>

  <target name="BatchClientCont" depends="compile">
    <joglClient>
      <arg value="-batch=?,50d,continuous,fido.out"/>
      <arg value="${basedir}/samples/Bogaland/Bogaland.scn"/>
    </joglClient>
  </target>

  <target name="BatchClient" depends="compile">
    <joglClient>
      <arg value="-batch=?,365d,batch,fido.out"/>
      <arg value="${basedir}/samples/Bogaland/Bogaland.scn"/>
    </joglClient>
  </target>

  <target name="BatchClientLH" depends="compile">
    <joglClient>
      <arg value="-batch=localhost,365d,batch,fido.out"/>
      <arg value="${basedir}/samples/Iraq/teds.scn"/>
    </joglClient>
  </target>

  <target name="DefaultClient" depends="compile">
    <joglClient>
      <arg value="-batch=localhost,0s,default,fido.out"/>
      <arg value="${basedir}/samples/Bogaland/Bogaland.scn"/>
    </joglClient>
  </target>

  <target name="PassiveClient" depends="compile">
    <joglClient>
      <arg value="-batch=localhost,0s,passive,fido.out"/>
      <arg value="nofile"/>
    </joglClient>
  </target>

  <target name="SubstrateEditor" depends="compile">
    <joglClient>
      <arg value="-substrate=?"/>
    </joglClient>
  </target>

  <target name="testSample" depends="compile">
    <!-- Just runs client with variable sample file -->
    <!-- Set default -->
    <condition property="file" value="combat.scn">
      <not>
        <isset property="file"/>
      </not>
    </condition>

    <fileset id="testSample.files"
      dir="${basedir}/samples"
      casesensitive="yes">
      <include name="**/${file}"/>
    </fileset>

    <pathconvert property="testSample.filesExpanded"
      refid="testSample.files"
      pathsep=" "/>
    <joglClient>
      <arg value="${testSample.filesExpanded}"/>
    </joglClient>
  </target>

  <!-- Special classes test targets -->
  <target name="CommTest" depends="compile">
    <jogljava classname="StratmasClient.CommTest">
    </jogljava>
  </target>
  <target name="XMLImporter" depends="compile">
    <jogljava classname="StratmasClient.XMLImporter">
      <arg value="${basedir}/instance2.xml"/>
    </jogljava>
  </target>

  <!-- Document generation -->
  <target name="docs" depends="compile">
    <mkdir dir="docs"/>
    <javadoc
      destdir="docs"
      classpath="${build}"
      author="true"
      version="true"
      use="true"
      windowtitle="${ant.project.name}"
      private="true">
      <link href="http://docs.oracle.com/javase/6/docs/api/"/>
      <doclet name="org.umlgraph.doclet.UmlGraphDoc"
          path="${externaljars}/UmlGraph-5.6_6.6-SNAPSHOT.jar">
          <!-- see http://www.umlgraph.org/doc/indexw.html -->

        <param name="-attributes" />
        <param name="-constructors" />
        <param name="-operations" />
        <param name="-enumconstants" />
        <param name="-enumerations" />
        <param name="-qualify" />
        <param name="-types" />
        <param name="-visibility" />

        <param name="-inferdep" />
        <param name="-inferdepinpackage" />
        <param name="-inferrel" />
        <param name="-useimports" />

        <param name="-compact" />
      </doclet>
      <packageset dir="${src}" defaultexcludes="yes">
        <include name="**"/>
        <exclude name="StratmasClient/treeview2/**"/>
        <exclude name="StratmasClient/filter/PathFilter.java"/>
        <exclude name="StratmasClient/filter/ReferenceFilter.java"/>
        <exclude name="StratmasClient/filter/IdentifierRegexFilter.java"/>
        <exclude name="StratmasClient/evolver/PointComponentParameter.java"/>
      </packageset>
    </javadoc>
    <apply executable="dot" dest="." parallel="false">
      <arg value="-Tpng"/>
      <arg value="-o"/>
      <targetfile/>
      <srcfile/>
      <fileset dir="." includes="*.dot"/>
      <mapper type="glob" from="*.dot" to="*.png"/>
    </apply>
  </target>

  <!-- Cleaning -->
  <target name="clean"
    description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete file="${src}/StratmasClient/TaclanV2/Parser.java"/>
    <delete file="${src}/StratmasClient/TaclanV2/Lexer.java"/>
    <delete file="${src}/StratmasClient/TaclanV2/Sym.java"/>
  </target>

  <!-- Make "ant foo.scn" work -->
  <fileset id="samples.files"
    dir="${basedir}/samples"
    casesensitive="yes">
    <include name="**/*.scn"/>
  </fileset>
  <pathconvert property="sampleTargets"
    refid="samples.files"
    pathsep="">
    <chainedmapper>
      <flattenmapper/>
      <regexpmapper from=".*" to='&lt;target name="\0"&gt;&lt;antcall target="testSample"&gt;&lt;param name="file" value="\0"/&gt;&lt;/antcall&gt;&lt;/target&gt;'/>
    </chainedmapper>
  </pathconvert>

  <echo file="${build}/antSamples.xml"
    message='&lt;project name="samples"&gt;${sampleTargets}&lt;/project&gt;'/>
  <import file="${build}/antSamples.xml"/>
</project>
